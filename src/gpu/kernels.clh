#define GEMM_TILE_DIM 16

__kernel void matMul(__global float* lBuffer, __global float* rBuffer, __global float* resultBuffer,
                     const uint lDim_0, const uint lDim_1, const uint rDim_1)
{
    // local size equals global size
    const uint2 global_size = {get_global_size(0), get_global_size(1)};
    const uint2 thread_idx = {get_global_id(0), get_global_id(1)};

    if (thread_idx.y >= lDim_0 || thread_idx.x >= rDim_1)
    {
        return;
    }

    for (uint i = thread_idx.y; i < lDim_0; i += global_size.y)
    {
        
        for (uint j = thread_idx.x; j < rDim_1; j += global_size.x)
        {
            float sum = 0.0f;
            for (uint k = 0; k < lDim_1; ++k)
            {
                const uint lIdx = k + i * lDim_1; // row i, column k
                const uint rIdx = j + k * rDim_1; // row k, column j
                sum += lBuffer[lIdx] * rBuffer[rIdx];
            }
            const uint resIdx = j + i * rDim_1;  // row i, column j
            resultBuffer[resIdx] = sum;
        }    
    }
}

/*
* @note  gemm stands for GEneral Matrix Multiplication
*/
__kernel void gemm(__global float* lBuffer, __global float* rBuffer, __global float* resultBuffer,
                     const uint lDim_0, const uint lDim_1, const uint rDim_1)
{
    const uint2 global_size   =    {get_global_size(0), get_global_size(1)};
    const uint2 local_size    =    {get_local_size(0), get_local_size(1)};
    const uint2 thread_g_idx  =    {get_global_id(0), get_global_id(1)};
    const uint2 thread_l_idx  =    {get_local_id(0), get_local_id(1)};
    const uint2 group_idx     =    {get_group_id(0), get_group_id(1)};
    const uint2 group_nums    =    {get_num_groups(0), get_num_groups(1)};
}