__kernel void matMul(__global float* lBuffer, __global float* rBuffer, __global float* resultBuffer,
                     const unsigned int lDim_0, const unsigned int lDim_1, const unsigned int rDim_1)
{
    // local size equals global size
    const uint2 global_size = {get_global_size(0), get_global_size(1)};
    const uint2 thread_idx = {get_global_id(0), get_global_id(1)};

    if (thread_idx.y >= lDim_0 || thread_idx.x >= rDim_1)
    {
        return;
    }

    for (uint i = thread_idx.y; i < lDim_0; i += global_size.y)
    {
        
        for (uint j = thread_idx.x; j < rDim_1; j += global_size.x)
        {
            float sum = 0.0f;
            for (uint k = 0; k < lDim_1; ++k)
            {
                const uint lIdx = k + i * lDim_1; // row i, column k
                const uint rIdx = j + k * rDim_1; // row k, column j
                sum += lBuffer[lIdx] * rBuffer[rIdx];
            }
            const uint resIdx = j + i * rDim_1;  // row i, column j
            resultBuffer[resIdx] = sum;
        }    
    }
}
